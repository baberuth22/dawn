{% schema %}
{
  "name": "WellSaid TTS Integration",
  "settings": [
    {
      "type": "textarea",
      "id": "text_to_convert",
      "label": "Text to Convert",
      "default": "Enter the text you want to convert to speech here."
    },
    {
      "type": "select",
      "id": "speaker_id",
      "label": "Speaker ID",
      "options": [
        { "value": "1", "label": "Speaker 1" },
        { "value": "2", "label": "Speaker 2" },
        { "value": "3", "label": "Speaker 3" }
        // Add more options based on the fetched speaker IDs
      ],
      "default": "3"
    },
    {
      "type": "select",
      "id": "play_position",
      "label": "Play Voiceover At",
      "options": [
        { "value": "top", "label": "Top of the Page" },
        { "value": "bottom", "label": "Bottom of the Page" },
        { "value": "element_id", "label": "Specific Element" }
      ],
      "default": "top"
    },
    {
      "type": "text",
      "id": "element_id",
      "label": "Element ID",
      "info": "Enter the ID of the element where the voiceover should be triggered, if 'Specific Element' is selected."
    }
  ],
  "presets": [
    {
      "name": "WellSaid TTS Integration",
      "category": "Custom Sections"
    }
  ]
}
{% endschema %}

<div>
  <h2>WellSaid Labs TTS Integration</h2>
  <p>Enter the text you want to convert to speech and select a speaker.</p>
  <button id="play-voiceover">Play Voiceover</button>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const textToConvert = "{{ section.settings.text_to_convert }}";
    const speakerId = "{{ section.settings.speaker_id }}";
    const playPosition = "{{ section.settings.play_position }}";
    const elementId = "{{ section.settings.element_id }}";

    function playVoiceover(textToConvert, speakerId) {
      const proxyUrl = '/apps/sa/'; // Update with your actual proxy URL
      const payload = { text: textToConvert, shop: '{{ shop.domain }}', speaker_id: speakerId };

      fetch(proxyUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(payload)
      })
      .then(response => response.json())
      .then(data => {
        console.log(data)
        if (data.status === 'error') {
          console.error('Error:', data.message);
          alert('Error: ' + data.message);
          return;
        }
        const audio = new Audio(data.audioUrl);
        audio.play();
      })
      .catch(error => console.error('Error:', error));
    }

    const playButton = document.getElementById('play-voiceover');

    if (playPosition === 'top') {
      playButton.addEventListener('click', () => playVoiceover(textToConvert, speakerId));
    } else if (playPosition === 'bottom') {
      window.addEventListener('scroll', () => {
        if ((window.innerHeight + window.scrollY) >= document.body.offsetHeight) {
          playVoiceover(textToConvert, speakerId);
        }
      });
    } else if (playPosition === 'element_id' && elementId) {
      const targetElement = document.getElementById(elementId);
      if (targetElement) {
        const observer = new IntersectionObserver((entries) => {
          entries.forEach(entry => {
            if (entry.isIntersecting) {
              playVoiceover(textToConvert, speakerId);
            }
          });
        });
        observer.observe(targetElement);
      }
    }
  });
</script>
