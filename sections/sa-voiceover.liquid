{% schema %}
{
  "name": "SA - Voiceover",
  "settings": [
    {
      "type": "select",
      "id": "tts_api_choice",
      "label": "Choose TTS API",
      "options": [
        { "value": "wellsaid", "label": "WellSaid" },
        { "value": "synthesia", "label": "Synthesia.io" },
        { "value": "playht", "label": "Play.ht" },
        { "value": "listnr", "label": "Listnr.tech" },
        { "value": "descript", "label": "Descript.com" },
        { "value": "google", "label": "Google Cloud" },
        { "value": "amazon", "label": "Amazon Polly" },
        { "value": "microsoft", "label": "Microsoft Azure" },
        { "value": "speechify", "label": "Speechify.com" }
      ],
      "info": "Refer to the instructions for obtaining the API key."
    },
    {
      "type": "text",
      "id": "api_key",
      "label": "API Key",
      "info": "Enter the API key obtained from the selected TTS API provider."
    },
    {
      "type": "textarea",
      "id": "text_to_convert",
      "label": "Text to Convert",
      "default": "Enter the text you want to convert to speech here."
    },
    {
      "type": "select",
      "id": "play_position",
      "label": "Play Voiceover At",
      "options": [
        { "value": "top", "label": "Top of the Page" },
        { "value": "bottom", "label": "Bottom of the Page" },
        { "value": "element_id", "label": "Specific Element" }
      ],
      "default": "top"
    },
    {
      "type": "text",
      "id": "element_id",
      "label": "Element ID",
      "default": "something-unique",
      "info": "Enter the ID of the element where the voiceover should be triggered, if 'Specific Element' is selected."
    }
  ],
  "presets": [
    {
      "name": "SA Voiceover",
      "category": "Custom Sections"
    }
  ]
}
{% endschema %}


  Text-to-Speech API Integration
  Choose a TTS API and provide your API key to convert text to speech.
  Play Voiceover



  document.addEventListener('DOMContentLoaded', function() {
    const apiChoice = "{{ section.settings.tts_api_choice }}";
    const apiKey = "{{ section.settings.api_key }}";
    const textToConvert = "{{ section.settings.text_to_convert }}";
    const playPosition = "{{ section.settings.play_position }}";
    const elementId = "{{ section.settings.element_id }}";

    function playVoiceover(apiChoice, apiKey, textToConvert) {
      let apiUrl = '';
      let payload = {};
      let headers = { 'Authorization': `Bearer ${apiKey}` };

      switch (apiChoice) {
        case 'wellsaid':
          apiUrl = 'https://api.wellsaidlabs.com/v1/tts';
          payload = { text: textToConvert };
          break;
        case 'synthesia':
          apiUrl = 'https://api.synthesia.io/v1/videos';
          payload = { script: textToConvert };
          break;
        case 'playht':
          apiUrl = 'https://play.ht/api/v1/convert';
          payload = { text: textToConvert };
          break;
        case 'listnr':
          apiUrl = 'https://api.listnr.tech/v1/convert';
          payload = { article: textToConvert };
          break;
        case 'descript':
          apiUrl = 'https://api.descript.com/v1/tts';
          payload = { text: textToConvert };
          break;
        case 'google':
          apiUrl = 'https://texttospeech.googleapis.com/v1/text:synthesize';
          payload = { input: { text: textToConvert }, voice: { languageCode: 'en-US', ssmlGender: 'NEUTRAL' }, audioConfig: { audioEncoding: 'MP3' } };
          break;
        case 'amazon':
          apiUrl = 'https://polly.amazonaws.com/v1/speech';
          payload = { Text: textToConvert, OutputFormat: 'mp3', VoiceId: 'Joanna' };
          headers = { 'Authorization': `AWS4-HMAC-SHA256 Credential=${apiKey}` };
          break;
        case 'microsoft':
          apiUrl = 'https://westus.tts.speech.microsoft.com/cognitiveservices/v1';
          payload = { text: textToConvert };
          break;
        case 'speechify':
          apiUrl = 'https://api.speechify.com/v1/convert';
          payload = { text: textToConvert };
          break;
      }

      fetch(apiUrl, {
        method: 'POST',
        headers: headers,
        body: JSON.stringify(payload)
      })
      .then(response => response.json())
      .then(data => {
        const audio = new Audio(data.audioUrl || data.url);
        audio.play();
      })
      .catch(error => console.error('Error:', error));
    }

    const playButton = document.getElementById('play-voiceover');

    if (playPosition === 'top') {
      playButton.addEventListener('click', () => playVoiceover(apiChoice, apiKey, textToConvert));
    } else if (playPosition === 'bottom') {
      window.addEventListener('scroll', () => {
        if ((window.innerHeight + window.scrollY) >= document.body.offsetHeight) {
          playVoiceover(apiChoice, apiKey, textToConvert);
        }
      });
    } else if (playPosition === 'element_id' && elementId) {
      const targetElement = document.getElementById(elementId);
      if (targetElement) {
        const observer = new IntersectionObserver((entries) => {
          entries.forEach(entry => {
            if (entry.isIntersecting) {
              playVoiceover(apiChoice, apiKey, textToConvert);
            }
          });
        });
        observer.observe(targetElement);
      }
    }
  });

	
							