{% schema %}
{
  "name": "Shader Doodle Section",
  "settings": [
    {
      "type": "text",
      "id": "section_title",
      "label": "Section Title",
      "default": "Shader Doodle"
    },
    {
      "type": "color",
      "id": "color1",
      "label": "Color 1",
      "default": "#ff0000"
    },
    {
      "type": "color",
      "id": "color2",
      "label": "Color 2",
      "default": "#00ff00"
    },
    {
      "type": "range",
      "id": "speed",
      "label": "Animation Speed",
      "default": 1,
      "min": 0.1,
      "max": 5,
      "step": 0.1
    },
    {
      "type": "select",
      "id": "animation_type",
      "label": "Animation Type",
      "options": [
        {
          "value": "sine_wave",
          "label": "Sine Wave"
        },
        {
          "value": "circle_pattern",
          "label": "Circle Pattern"
        }
      ],
      "default": "sine_wave"
    }
  ],
  "presets": [
    {
      "name": "Default",
      "category": "Custom"
    }
  ]
}
{% endschema %}

<div class="shader-doodle-section">
  <h2>{{ section.settings.section_title }}</h2>
  <shader-doodle id="shader-doodle">
    <script type="x-shader/x-fragment" id="shader-script">
      void main() {
        vec2 st = gl_FragCoord.xy / u_resolution.xy;
        vec3 color = vec3(st.x, st.y, abs(sin(u_time * {{ section.settings.speed }})));
        gl_FragColor = vec4(color, 1.0);
      }
    </script>
  </shader-doodle>
</div>

<style>
.shader-doodle-section {
  text-align: center;
  padding: 20px;
}

shader-doodle {
  width: 100%;
  height: 400px;
}
</style>

<script src="https://unpkg.com/shader-doodle@alpha"></script>
<script>
  document.addEventListener('DOMContentLoaded', () => {
    const shaderDoodle = document.getElementById('shader-doodle');
    const shaderScript = document.getElementById('shader-script');

    const color1 = '{{ section.settings.color1 }}';
    const color2 = '{{ section.settings.color2 }}';
    const speed = {{ section.settings.speed }};
    const animationType = '{{ section.settings.animation_type }}';

    let fragmentShader = '';

    if (animationType === 'sine_wave') {
      fragmentShader = `
        void main() {
          vec2 st = gl_FragCoord.xy / u_resolution.xy;
          vec3 color = vec3(st.x, st.y, abs(sin(u_time * ${speed})));
          gl_FragColor = vec4(color, 1.0);
        }
      `;
    } else if (animationType === 'circle_pattern') {
      fragmentShader = `
        void main() {
          vec2 st = gl_FragCoord.xy / u_resolution.xy;
          vec2 toCenter = st - vec2(0.5);
          float angle = atan(toCenter.y, toCenter.x);
          float radius = length(toCenter) * 2.0;
          vec3 color = vec3(0.5 + 0.5 * cos(angle + u_time * ${speed}), 0.5 + 0.5 * sin(angle + u_time * ${speed}), 0.5);
          gl_FragColor = vec4(color, 1.0);
        }
      `;
    }

    shaderScript.textContent = fragmentShader;
    shaderDoodle.innerHTML = shaderScript.outerHTML;
  });
</script>
