{% schema %}
{
  "name": "➕ SA - Conversation Form",
  "settings": [
    {
      "type": "text",
      "id": "form_id",
      "label": "Form ID",
      "default": "default-form-id",
      "info": "Provide the form ID. This will be used in the data attribute selector."
    },
    {
      "type": "number",
      "id": "context_width",
      "label": "Context Width (px)",
      "default": 660,
      "info": "Set the width of the conversational form context."
    },
    {
      "type": "number",
      "id": "context_height",
      "label": "Context Height (px)",
      "default": 600,
      "info": "Set the height of the conversational form context."
    }
  ],
  "presets": [
    {
      "name": "➕ SA - Conversation Form",
      "category": "Form"
    }
  ]
}
{% endschema %}

<div class="sa-conversational-form" id="cf-context-{{ section.id }}" style="width: {{ section.settings.context_width }}px; height: {{ section.settings.context_height }}px;"></div>

<script type="text/javascript" src="https://cdn.jsdelivr.net/gh/space10-community/conversational-form@1.0.1/dist/conversational-form.min.js" crossorigin></script>
<script>
  document.addEventListener("DOMContentLoaded", function() {
    var formEmbedSelector = '[data-forms-id="forms-root-{{ section.settings.form_id }}"] form-embed';
    var contextId = "cf-context-{{ section.id }}";

    function initializeConversationalForm() {
      var shadowHostElement = document.querySelector(formEmbedSelector);
      console.log('shadowHostElement', shadowHostElement);
      if (shadowHostElement && shadowHostElement.shadowRoot) {
        var formElement = shadowHostElement.shadowRoot.querySelector("form[data-testid='form']");
        console.log('formElement', formElement);
        var contextElement = document.getElementById(contextId);
        console.log('contextElement', contextElement);

        if (formElement) {
          // Initialize the conversational form
          var conversationalForm = window.cf.ConversationalForm.startTheConversation({
            formEl: formElement,
            context: contextElement,
            submitCallback: function() {
              // Diagnostic logging
              console.log("Detected inputs in the conversational form:", contextElement.querySelectorAll("input, textarea, select"));
              
              // Populate the original form with values from the conversational form
              var inputs = formElement.querySelectorAll("input, textarea, select");
              inputs.forEach(function(input) {
                var cfInput = contextElement.querySelector(`[name="${input.name}"]`);
                if (cfInput) {
                  console.log(`Populating ${input.name} with value: ${cfInput.value}`);
                  input.value = cfInput.value;
                } else {
                  console.log(`No matching conversational form input found for ${input.name}`);
                }
              });

              // Hide the conversational form
              contextElement.style.display = "none";
              formElement.submit(); // Submit the actual form
              conversationalForm.addRobotChatResponse(
                "Congratulations, you have reached the end of the form!"
              );
            }
          });

          // Wait until the conversational form is fully loaded
          setTimeout(function() {
            shadowHostElement.style.display = "none";
          }, 500); // Adjust the delay if necessary
        } else {
          console.error("Form element not found within the Shadow DOM.");
        }
      } else {
        console.error("Shadow host element not found or does not contain a shadow root:", formEmbedSelector);
      }
    }

    // Wait for the shadow DOM to be available
    var observer = new MutationObserver(function(mutations, obs) {
      var shadowHostElement = document.querySelector(formEmbedSelector);
      if (shadowHostElement && shadowHostElement.shadowRoot) {
        initializeConversationalForm();
        obs.disconnect(); // Stop observing once we find the shadow DOM
      }
    });

    observer.observe(document, {
      childList: true,
      subtree: true
    });
  });
</script>
