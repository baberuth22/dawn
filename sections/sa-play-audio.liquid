{% schema %}
{
  "name": "SA - Play Audio",
  "settings": [
    {
      "type": "header",
      "content": "Instructions"
    },
    {
      "type": "paragraph",
      "content": "To use this section, first upload your MP3 audio files to the files section of your Shopify store. Then, copy the URL of the uploaded file and paste it into the text field below."
    },
    {
      "type": "header",
      "content": "Sound Settings"
    },
    {
      "type": "text",
      "id": "audio_url",
      "label": "MP3 File URL",
      "default": "https://example.com/your-audio-file.mp3"
    },
    {
      "type": "select",
      "id": "play_position",
      "label": "Play Sound At",
      "options": [
        { "value": "self", "label": "This Section" },
        { "value": "top", "label": "Top of the Page" },
        { "value": "bottom", "label": "Bottom of the Page" },
        { "value": "element_id", "label": "Specific Element" }
      ],
      "default": "top"
    },
    {
      "type": "text",
      "id": "element_id",
      "label": "Element ID",
      "info": "Enter the ID of the element where the sound should be triggered, if 'Specific Element' is selected."
    },
    {
      "type": "checkbox",
      "id": "show_popup",
      "label": "Show toast to ask for audio permission",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "play_once",
      "label": "Play audio only once",
      "default": false
    }
  ],
  "presets": [
    {
      "name": "SA - Play Audio",
      "category": "Sections Anywhere"
    }
  ]
}
{% endschema %}

<!-- sa-play-sound.liquid -->
<div id="{{ section.id }}">
  <button style="display:none" id="play-sound">Play Sound</button>
</div>

<div id="audio-toast" class="audio-toast" style="display: none;">
  <p>Do you want to play audio?</p>
  <button id="audio-yes">Yes</button>
  <button id="audio-no">No</button>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const mp3File = "{{ section.settings.audio_url }}";
    const playPosition = "{{ section.settings.play_position }}";
    const elementId = "{{ section.settings.element_id }}";
    const showPopup = {{ section.settings.show_popup | json }};
    const playOnce = {{ section.settings.play_once | json }};
    let audioPlaying = false;
    let userInteracted = false;
    let audioPlayed = false;

    function playSound(mp3File) {
      if (audioPlaying || (playOnce && audioPlayed)) return;

      const audio = new Audio(mp3File);
      audio.play();
      audioPlaying = true;
      audioPlayed = true;

      audio.addEventListener('ended', function() {
        audioPlaying = false;
      });
    }

    function showPopupAndPlay(mp3File) {
      if (showPopup) {
        const toast = document.getElementById('audio-toast');
        toast.style.display = 'block';

        document.getElementById('audio-yes').addEventListener('click', function() {
          userInteracted = true;
          toast.style.display = 'none';
          playSound(mp3File);
        });

        document.getElementById('audio-no').addEventListener('click', function() {
          toast.style.display = 'none';
        });
      } else {
        playSound(mp3File);
      }
    }

    document.body.addEventListener('click', function() {
      userInteracted = true;
    });

    const playButton = document.getElementById('play-sound');
    playButton.addEventListener('click', () => {
      console.log('Scroll Position Click:', window.scrollY);
      playSound(mp3File);
    });

    console.log('Play Position:', playPosition);

    if (playPosition === 'top') {
      if (window.scrollY === 0) {
        console.log('Scroll Position Top:', window.scrollY);
        setTimeout(() => {
          if (userInteracted) {
            playSound(mp3File);
          } else {
            showPopupAndPlay(mp3File);
          }
        }, 1000);
      }
    } else if (playPosition === 'bottom') {
      window.addEventListener('scroll', () => {
        console.log('Scroll Position Bottom:', window.scrollY);
        if ((window.innerHeight + window.scrollY) >= document.body.offsetHeight) {
          if (userInteracted) {
            playSound(mp3File);
          } else {
            showPopupAndPlay(mp3File);
          }
        }
      });
    } else if (playPosition === 'self') {
      const targetElement = document.getElementById("{{ section.id }}");
      console.log('Target Element:', targetElement);
      console.log('Scroll Position Self:', window.scrollY);
      if (targetElement) {
        const observer = new IntersectionObserver((entries) => {
          entries.forEach(entry => {
            console.log('Scroll Position Self:', window.scrollY);
            if (entry.isIntersecting) {
              if (userInteracted) {
                playSound(mp3File);
              } else {
                showPopupAndPlay(mp3File);
              }
            }
          });
        });
        observer.observe(targetElement);
      }
    } else if (playPosition === 'element_id' && elementId) {
      const targetElement = document.getElementById(elementId);
      if (targetElement) {
        const observer = new IntersectionObserver((entries) => {
          entries.forEach(entry => {
            console.log('Scroll Position Element:', window.scrollY);
            if (entry.isIntersecting) {
              if (userInteracted) {
                playSound(mp3File);
              } else {
                showPopupAndPlay(mp3File);
              }
            }
          });
        });
        observer.observe(targetElement);
      }
    }
  });
</script>

<style>
  .sa-audio-picker {
    text-align: center;
    margin: 20px;
  }
  .sa-audio-picker audio {
    width: 100%;
    max-width: 600px;
  }
  .audio-toast {
    position: fixed;
    bottom: 20px;
    left: 50%;
    transform: translateX(-50%);
    background-color: #333;
    color: #fff;
    padding: 15px;
    border-radius: 5px;
    z-index: 1000;
  }
  .audio-toast button {
    margin-left: 10px;
    background-color: #555;
    color: #fff;
    border: none;
    padding: 5px 10px;
    border-radius: 3px;
    cursor: pointer;
  }
</style>
